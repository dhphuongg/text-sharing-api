// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OtpJob {
  REGISTER
  RESET_PASSWORD
}

model Otp {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.DateTime(0)
  email     String   @unique
  code      Int
  job       OtpJob?
  user      User?
  deletedAt DateTime @map("deleted_at")
}

model User {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt      DateTime       @updatedAt @map("updated_at") @db.DateTime(0)
  fullName      String         @map("full_name")
  email         String         @unique
  username      String         @unique @db.VarChar(30)
  password      String
  avatar        String?
  birthday      DateTime?
  bio           String?        @db.VarChar(150)
  role          Role           @default(USER)
  followers     Follow[]       @relation(name: "follower")
  following     Follow[]       @relation(name: "following")
  posts         Post[]
  postsLiked    Reation[]
  otp           Otp            @relation(fields: [email], references: [email])
  notifiactions Notification[] @relation(name: "notification")
  activities    Notification[] @relation(name: "activity")

  @@fulltext([fullName, username])
  @@map("users")
}

model Follow {
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime(0)
  followById  String   @map("follower_by_id")
  followBy    User     @relation(name: "following", fields: [followById], references: [id], onDelete: Cascade)
  followingId String   @map("following_id")
  following   User     @relation(name: "follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followById, followingId])
  @@map("follows")
}

enum PostType {
  NEW
  REPLY
  REPOST
}

model PostMedia {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.DateTime(0)
  mediaFileUrl String   @map("media_file_url")
  postId       String   @map("post_id")
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_media")
}

model Post {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt      DateTime       @updatedAt @map("updated_at") @db.DateTime(0)
  content       String?        @db.VarChar(500)
  media         PostMedia[]
  type          PostType       @default(NEW)
  // author
  userId        String         @map("user_id")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies       Post[]         @relation(name: "PostReplies")
  // post reference
  postRefId     String?        @map("post_ref_id")
  postRef       Post?          @relation(name: "PostReplies", fields: [postRefId], references: [id], onDelete: SetNull)
  likers        Reation[]
  notifications Notification[]

  @@fulltext([content])
  @@map("posts")
}

model Reation {
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@map("reactions")
}

enum Event {
  FOLLOW
  LIKE_POST
  LIKE_REPLY
  NEW
  REPLY
  REPOST
}

model Notification {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(0)
  receiverId String
  receiver   User     @relation(name: "notification", fields: [receiverId], references: [id])
  actorId    String
  actor      User     @relation(name: "activity", fields: [actorId], references: [id])
  postId     String?
  post       Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)
  event      Event
  content    String

  @@map("notifications")
}